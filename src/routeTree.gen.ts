/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RpcRpcLRouteImport } from './routes/rpc.$rpc/_l'
import { Route as RpcRpcLIndexRouteImport } from './routes/rpc.$rpc/_l/index'
import { Route as RpcRpcLBlockBlockNumberRouteImport } from './routes/rpc.$rpc/_l/block.$blockNumber'
import { Route as RpcRpcLAddressAddressRouteImport } from './routes/rpc.$rpc/_l/address.$address'
import { Route as RpcRpcLTxTxIndexRouteImport } from './routes/rpc.$rpc/_l/tx.$tx/index'

const RpcRpcRouteImport = createFileRoute('/rpc/$rpc')()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RpcRpcRoute = RpcRpcRouteImport.update({
  id: '/rpc/$rpc',
  path: '/rpc/$rpc',
  getParentRoute: () => rootRouteImport,
} as any)
const RpcRpcLRoute = RpcRpcLRouteImport.update({
  id: '/_l',
  getParentRoute: () => RpcRpcRoute,
} as any)
const RpcRpcLIndexRoute = RpcRpcLIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RpcRpcLRoute,
} as any)
const RpcRpcLBlockBlockNumberRoute = RpcRpcLBlockBlockNumberRouteImport.update({
  id: '/block/$blockNumber',
  path: '/block/$blockNumber',
  getParentRoute: () => RpcRpcLRoute,
} as any)
const RpcRpcLAddressAddressRoute = RpcRpcLAddressAddressRouteImport.update({
  id: '/address/$address',
  path: '/address/$address',
  getParentRoute: () => RpcRpcLRoute,
} as any)
const RpcRpcLTxTxIndexRoute = RpcRpcLTxTxIndexRouteImport.update({
  id: '/tx/$tx/',
  path: '/tx/$tx/',
  getParentRoute: () => RpcRpcLRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/rpc/$rpc': typeof RpcRpcLRouteWithChildren
  '/rpc/$rpc/': typeof RpcRpcLIndexRoute
  '/rpc/$rpc/address/$address': typeof RpcRpcLAddressAddressRoute
  '/rpc/$rpc/block/$blockNumber': typeof RpcRpcLBlockBlockNumberRoute
  '/rpc/$rpc/tx/$tx': typeof RpcRpcLTxTxIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/rpc/$rpc': typeof RpcRpcLIndexRoute
  '/rpc/$rpc/address/$address': typeof RpcRpcLAddressAddressRoute
  '/rpc/$rpc/block/$blockNumber': typeof RpcRpcLBlockBlockNumberRoute
  '/rpc/$rpc/tx/$tx': typeof RpcRpcLTxTxIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/rpc/$rpc': typeof RpcRpcRouteWithChildren
  '/rpc/$rpc/_l': typeof RpcRpcLRouteWithChildren
  '/rpc/$rpc/_l/': typeof RpcRpcLIndexRoute
  '/rpc/$rpc/_l/address/$address': typeof RpcRpcLAddressAddressRoute
  '/rpc/$rpc/_l/block/$blockNumber': typeof RpcRpcLBlockBlockNumberRoute
  '/rpc/$rpc/_l/tx/$tx/': typeof RpcRpcLTxTxIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/rpc/$rpc'
    | '/rpc/$rpc/'
    | '/rpc/$rpc/address/$address'
    | '/rpc/$rpc/block/$blockNumber'
    | '/rpc/$rpc/tx/$tx'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/rpc/$rpc'
    | '/rpc/$rpc/address/$address'
    | '/rpc/$rpc/block/$blockNumber'
    | '/rpc/$rpc/tx/$tx'
  id:
    | '__root__'
    | '/'
    | '/rpc/$rpc'
    | '/rpc/$rpc/_l'
    | '/rpc/$rpc/_l/'
    | '/rpc/$rpc/_l/address/$address'
    | '/rpc/$rpc/_l/block/$blockNumber'
    | '/rpc/$rpc/_l/tx/$tx/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RpcRpcRoute: typeof RpcRpcRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rpc/$rpc': {
      id: '/rpc/$rpc'
      path: '/rpc/$rpc'
      fullPath: '/rpc/$rpc'
      preLoaderRoute: typeof RpcRpcRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rpc/$rpc/_l': {
      id: '/rpc/$rpc/_l'
      path: '/rpc/$rpc'
      fullPath: '/rpc/$rpc'
      preLoaderRoute: typeof RpcRpcLRouteImport
      parentRoute: typeof RpcRpcRoute
    }
    '/rpc/$rpc/_l/': {
      id: '/rpc/$rpc/_l/'
      path: '/'
      fullPath: '/rpc/$rpc/'
      preLoaderRoute: typeof RpcRpcLIndexRouteImport
      parentRoute: typeof RpcRpcLRoute
    }
    '/rpc/$rpc/_l/block/$blockNumber': {
      id: '/rpc/$rpc/_l/block/$blockNumber'
      path: '/block/$blockNumber'
      fullPath: '/rpc/$rpc/block/$blockNumber'
      preLoaderRoute: typeof RpcRpcLBlockBlockNumberRouteImport
      parentRoute: typeof RpcRpcLRoute
    }
    '/rpc/$rpc/_l/address/$address': {
      id: '/rpc/$rpc/_l/address/$address'
      path: '/address/$address'
      fullPath: '/rpc/$rpc/address/$address'
      preLoaderRoute: typeof RpcRpcLAddressAddressRouteImport
      parentRoute: typeof RpcRpcLRoute
    }
    '/rpc/$rpc/_l/tx/$tx/': {
      id: '/rpc/$rpc/_l/tx/$tx/'
      path: '/tx/$tx'
      fullPath: '/rpc/$rpc/tx/$tx'
      preLoaderRoute: typeof RpcRpcLTxTxIndexRouteImport
      parentRoute: typeof RpcRpcLRoute
    }
  }
}

interface RpcRpcLRouteChildren {
  RpcRpcLIndexRoute: typeof RpcRpcLIndexRoute
  RpcRpcLAddressAddressRoute: typeof RpcRpcLAddressAddressRoute
  RpcRpcLBlockBlockNumberRoute: typeof RpcRpcLBlockBlockNumberRoute
  RpcRpcLTxTxIndexRoute: typeof RpcRpcLTxTxIndexRoute
}

const RpcRpcLRouteChildren: RpcRpcLRouteChildren = {
  RpcRpcLIndexRoute: RpcRpcLIndexRoute,
  RpcRpcLAddressAddressRoute: RpcRpcLAddressAddressRoute,
  RpcRpcLBlockBlockNumberRoute: RpcRpcLBlockBlockNumberRoute,
  RpcRpcLTxTxIndexRoute: RpcRpcLTxTxIndexRoute,
}

const RpcRpcLRouteWithChildren =
  RpcRpcLRoute._addFileChildren(RpcRpcLRouteChildren)

interface RpcRpcRouteChildren {
  RpcRpcLRoute: typeof RpcRpcLRouteWithChildren
}

const RpcRpcRouteChildren: RpcRpcRouteChildren = {
  RpcRpcLRoute: RpcRpcLRouteWithChildren,
}

const RpcRpcRouteWithChildren =
  RpcRpcRoute._addFileChildren(RpcRpcRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RpcRpcRoute: RpcRpcRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
