/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as RpcRpcLImport } from './routes/rpc.$rpc/_l'
import { Route as RpcRpcLIndexImport } from './routes/rpc.$rpc/_l/index'
import { Route as RpcRpcLBlockByHashBlockHashImport } from './routes/rpc.$rpc/_l/block-by-hash.$blockHash'

// Create Virtual Routes

const RpcRpcImport = createFileRoute('/rpc/$rpc')()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const RpcRpcRoute = RpcRpcImport.update({
  id: '/rpc/$rpc',
  path: '/rpc/$rpc',
  getParentRoute: () => rootRoute,
} as any)

const RpcRpcLRoute = RpcRpcLImport.update({
  id: '/_l',
  getParentRoute: () => RpcRpcRoute,
} as any)

const RpcRpcLIndexRoute = RpcRpcLIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RpcRpcLRoute,
} as any)

const RpcRpcLBlockByHashBlockHashRoute =
  RpcRpcLBlockByHashBlockHashImport.update({
    id: '/block-by-hash/$blockHash',
    path: '/block-by-hash/$blockHash',
    getParentRoute: () => RpcRpcLRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/rpc/$rpc': {
      id: '/rpc/$rpc'
      path: '/rpc/$rpc'
      fullPath: '/rpc/$rpc'
      preLoaderRoute: typeof RpcRpcImport
      parentRoute: typeof rootRoute
    }
    '/rpc/$rpc/_l': {
      id: '/rpc/$rpc/_l'
      path: '/rpc/$rpc'
      fullPath: '/rpc/$rpc'
      preLoaderRoute: typeof RpcRpcLImport
      parentRoute: typeof RpcRpcRoute
    }
    '/rpc/$rpc/_l/': {
      id: '/rpc/$rpc/_l/'
      path: '/'
      fullPath: '/rpc/$rpc/'
      preLoaderRoute: typeof RpcRpcLIndexImport
      parentRoute: typeof RpcRpcLImport
    }
    '/rpc/$rpc/_l/block-by-hash/$blockHash': {
      id: '/rpc/$rpc/_l/block-by-hash/$blockHash'
      path: '/block-by-hash/$blockHash'
      fullPath: '/rpc/$rpc/block-by-hash/$blockHash'
      preLoaderRoute: typeof RpcRpcLBlockByHashBlockHashImport
      parentRoute: typeof RpcRpcLImport
    }
  }
}

// Create and export the route tree

interface RpcRpcLRouteChildren {
  RpcRpcLIndexRoute: typeof RpcRpcLIndexRoute
  RpcRpcLBlockByHashBlockHashRoute: typeof RpcRpcLBlockByHashBlockHashRoute
}

const RpcRpcLRouteChildren: RpcRpcLRouteChildren = {
  RpcRpcLIndexRoute: RpcRpcLIndexRoute,
  RpcRpcLBlockByHashBlockHashRoute: RpcRpcLBlockByHashBlockHashRoute,
}

const RpcRpcLRouteWithChildren =
  RpcRpcLRoute._addFileChildren(RpcRpcLRouteChildren)

interface RpcRpcRouteChildren {
  RpcRpcLRoute: typeof RpcRpcLRouteWithChildren
}

const RpcRpcRouteChildren: RpcRpcRouteChildren = {
  RpcRpcLRoute: RpcRpcLRouteWithChildren,
}

const RpcRpcRouteWithChildren =
  RpcRpcRoute._addFileChildren(RpcRpcRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/rpc/$rpc': typeof RpcRpcLRouteWithChildren
  '/rpc/$rpc/': typeof RpcRpcLIndexRoute
  '/rpc/$rpc/block-by-hash/$blockHash': typeof RpcRpcLBlockByHashBlockHashRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/rpc/$rpc': typeof RpcRpcLIndexRoute
  '/rpc/$rpc/block-by-hash/$blockHash': typeof RpcRpcLBlockByHashBlockHashRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/rpc/$rpc': typeof RpcRpcRouteWithChildren
  '/rpc/$rpc/_l': typeof RpcRpcLRouteWithChildren
  '/rpc/$rpc/_l/': typeof RpcRpcLIndexRoute
  '/rpc/$rpc/_l/block-by-hash/$blockHash': typeof RpcRpcLBlockByHashBlockHashRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/rpc/$rpc'
    | '/rpc/$rpc/'
    | '/rpc/$rpc/block-by-hash/$blockHash'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/rpc/$rpc' | '/rpc/$rpc/block-by-hash/$blockHash'
  id:
    | '__root__'
    | '/'
    | '/rpc/$rpc'
    | '/rpc/$rpc/_l'
    | '/rpc/$rpc/_l/'
    | '/rpc/$rpc/_l/block-by-hash/$blockHash'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RpcRpcRoute: typeof RpcRpcRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RpcRpcRoute: RpcRpcRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/rpc/$rpc"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/rpc/$rpc": {
      "filePath": "rpc.$rpc",
      "children": [
        "/rpc/$rpc/_l"
      ]
    },
    "/rpc/$rpc/_l": {
      "filePath": "rpc.$rpc/_l.tsx",
      "parent": "/rpc/$rpc",
      "children": [
        "/rpc/$rpc/_l/",
        "/rpc/$rpc/_l/block-by-hash/$blockHash"
      ]
    },
    "/rpc/$rpc/_l/": {
      "filePath": "rpc.$rpc/_l/index.tsx",
      "parent": "/rpc/$rpc/_l"
    },
    "/rpc/$rpc/_l/block-by-hash/$blockHash": {
      "filePath": "rpc.$rpc/_l/block-by-hash.$blockHash.tsx",
      "parent": "/rpc/$rpc/_l"
    }
  }
}
ROUTE_MANIFEST_END */
